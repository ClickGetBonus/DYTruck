//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `CityData.plist`.
    static let cityDataPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "CityData", pathExtension: "plist")
    
    /// `bundle.url(forResource: "CityData", withExtension: "plist")`
    static func cityDataPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cityDataPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 87 images.
  struct image {
    /// Image `King`.
    static let king = Rswift.ImageResource(bundle: R.hostingBundle, name: "King")
    /// Image `alzf_gj_icn`.
    static let alzf_gj_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "alzf_gj_icn")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `dd_car_01`.
    static let dd_car_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dd_car_01")
    /// Image `dd_car_01a`.
    static let dd_car_01a = Rswift.ImageResource(bundle: R.hostingBundle, name: "dd_car_01a")
    /// Image `dd_car_02`.
    static let dd_car_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dd_car_02")
    /// Image `dd_car_02a`.
    static let dd_car_02a = Rswift.ImageResource(bundle: R.hostingBundle, name: "dd_car_02a")
    /// Image `dd_car_03`.
    static let dd_car_03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dd_car_03")
    /// Image `dd_car_03a`.
    static let dd_car_03a = Rswift.ImageResource(bundle: R.hostingBundle, name: "dd_car_03a")
    /// Image `dd_car_04`.
    static let dd_car_04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dd_car_04")
    /// Image `dd_car_04a`.
    static let dd_car_04a = Rswift.ImageResource(bundle: R.hostingBundle, name: "dd_car_04a")
    /// Image `fh_icn`.
    static let fh_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "fh_icn")
    /// Image `g_02_icn`.
    static let g_02_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "g_02_icn")
    /// Image `g_kng_icn`.
    static let g_kng_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "g_kng_icn")
    /// Image `g_sc_icn`.
    static let g_sc_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "g_sc_icn")
    /// Image `g_scg_icn`.
    static let g_scg_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "g_scg_icn")
    /// Image `g_skc_icn`.
    static let g_skc_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "g_skc_icn")
    /// Image `grzx_bg_01`.
    static let grzx_bg_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_bg_01")
    /// Image `grzx_bg_02`.
    static let grzx_bg_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_bg_02")
    /// Image `grzx_bq_icn`.
    static let grzx_bq_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_bq_icn")
    /// Image `grzx_button_01`.
    static let grzx_button_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_button_01")
    /// Image `grzx_button_02`.
    static let grzx_button_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_button_02")
    /// Image `grzx_dg_icn`.
    static let grzx_dg_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_dg_icn")
    /// Image `grzx_dj_01`.
    static let grzx_dj_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_dj_01")
    /// Image `grzx_dj_02`.
    static let grzx_dj_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_dj_02")
    /// Image `grzx_dz_icn`.
    static let grzx_dz_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_dz_icn")
    /// Image `grzx_jh_icn-1`.
    static let grzx_jh_icn1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_jh_icn-1")
    /// Image `grzx_jh_icn`.
    static let grzx_jh_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_jh_icn")
    /// Image `grzx_s_icn`.
    static let grzx_s_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_s_icn")
    /// Image `grzx_sz_icn`.
    static let grzx_sz_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_sz_icn")
    /// Image `grzx_tjyj_icn`.
    static let grzx_tjyj_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_tjyj_icn")
    /// Image `grzx_xx_icn-`.
    static let grzx_xx_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_xx_icn-")
    /// Image `grzx_xz2_icn`.
    static let grzx_xz2_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grzx_xz2_icn")
    /// Image `home_ddo_icn`.
    static let home_ddo_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_ddo_icn")
    /// Image `kjag_gj_icn`.
    static let kjag_gj_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "kjag_gj_icn")
    /// Image `login_mm_icn`.
    static let login_mm_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_mm_icn")
    /// Image `login_yzm_icn`.
    static let login_yzm_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_yzm_icn")
    /// Image `login_zh_icn`.
    static let login_zh_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_zh_icn")
    /// Image `ltqp.9`.
    static let ltqp9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ltqp.9")
    /// Image `ltqp_02.9`.
    static let ltqp_029 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ltqp_02.9")
    /// Image `mrtx_grzx`.
    static let mrtx_grzx = Rswift.ImageResource(bundle: R.hostingBundle, name: "mrtx_grzx")
    /// Image `s_bg_01`.
    static let s_bg_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "s_bg_01")
    /// Image `s_bg_02`.
    static let s_bg_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "s_bg_02")
    /// Image `sy_bg`.
    static let sy_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_bg")
    /// Image `sy_dd_01`.
    static let sy_dd_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_dd_01")
    /// Image `sy_dh_icn`.
    static let sy_dh_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_dh_icn")
    /// Image `sy_dw_icn`.
    static let sy_dw_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_dw_icn")
    /// Image `sy_mrt_icn`.
    static let sy_mrt_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_mrt_icn")
    /// Image `sy_mrt`.
    static let sy_mrt = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_mrt")
    /// Image `sy_pic_01`.
    static let sy_pic_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_pic_01")
    /// Image `sy_pic_02`.
    static let sy_pic_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_pic_02")
    /// Image `sy_qu_icn`.
    static let sy_qu_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_qu_icn")
    /// Image `sy_tp_yj`.
    static let sy_tp_yj = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_tp_yj")
    /// Image `sy_xx_icn`.
    static let sy_xx_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_xx_icn")
    /// Image `sy_yy_icn`.
    static let sy_yy_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_yy_icn")
    /// Image `syzc_xd_icn`.
    static let syzc_xd_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "syzc_xd_icn")
    /// Image `ty_backarrow_01`.
    static let ty_backarrow_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ty_backarrow_01")
    /// Image `ty_backarrow_02`.
    static let ty_backarrow_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ty_backarrow_02")
    /// Image `ty_backarrow_04`.
    static let ty_backarrow_04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ty_backarrow_04")
    /// Image `ty_backarrow`.
    static let ty_backarrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ty_backarrow")
    /// Image `ty_dd_04`.
    static let ty_dd_04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ty_dd_04")
    /// Image `ty_dd_icn`.
    static let ty_dd_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ty_dd_icn")
    /// Image `ty_dd_o1`.
    static let ty_dd_o1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ty_dd_o1")
    /// Image `ty_dv_icn`.
    static let ty_dv_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ty_dv_icn")
    /// Image `ty_wxy_icn`.
    static let ty_wxy_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ty_wxy_icn")
    /// Image `ty_xl_01`.
    static let ty_xl_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ty_xl_01")
    /// Image `ty_xz_icn`.
    static let ty_xz_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ty_xz_icn")
    /// Image `wd_backarrow_o1`.
    static let wd_backarrow_o1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wd_backarrow_o1")
    /// Image `wd_da_icn`.
    static let wd_da_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "wd_da_icn")
    /// Image `wd_dd_icn`.
    static let wd_dd_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "wd_dd_icn")
    /// Image `wd_dyj_icn`.
    static let wd_dyj_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "wd_dyj_icn")
    /// Image `wd_qx_icn`.
    static let wd_qx_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "wd_qx_icn")
    /// Image `wd_tj_icn`.
    static let wd_tj_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "wd_tj_icn")
    /// Image `wechat_gj_icn`.
    static let wechat_gj_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "wechat_gj_icn")
    /// Image `xd_icn`.
    static let xd_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "xd_icn")
    /// Image `yhq_01`.
    static let yhq_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "yhq_01")
    /// Image `yhq_02`.
    static let yhq_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "yhq_02")
    /// Image `yhq_bg_01`.
    static let yhq_bg_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "yhq_bg_01")
    /// Image `yqhy_bg`.
    static let yqhy_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "yqhy_bg")
    /// Image `zf_kq_icn`.
    static let zf_kq_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "zf_kq_icn")
    /// Image `zf_wechat_icn`.
    static let zf_wechat_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "zf_wechat_icn")
    /// Image `zf_ye_icn`.
    static let zf_ye_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "zf_ye_icn")
    /// Image `zf_zhib_icn`.
    static let zf_zhib_icn = Rswift.ImageResource(bundle: R.hostingBundle, name: "zf_zhib_icn")
    /// Image `zfym_pic`.
    static let zfym_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "zfym_pic")
    /// Image `zl_01`.
    static let zl_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "zl_01")
    /// Image `zl_02`.
    static let zl_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "zl_02")
    /// Image `zl_03`.
    static let zl_03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "zl_03")
    
    /// `UIImage(named: "King", bundle: ..., traitCollection: ...)`
    static func king(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.king, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "alzf_gj_icn", bundle: ..., traitCollection: ...)`
    static func alzf_gj_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alzf_gj_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dd_car_01", bundle: ..., traitCollection: ...)`
    static func dd_car_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dd_car_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dd_car_01a", bundle: ..., traitCollection: ...)`
    static func dd_car_01a(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dd_car_01a, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dd_car_02", bundle: ..., traitCollection: ...)`
    static func dd_car_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dd_car_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dd_car_02a", bundle: ..., traitCollection: ...)`
    static func dd_car_02a(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dd_car_02a, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dd_car_03", bundle: ..., traitCollection: ...)`
    static func dd_car_03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dd_car_03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dd_car_03a", bundle: ..., traitCollection: ...)`
    static func dd_car_03a(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dd_car_03a, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dd_car_04", bundle: ..., traitCollection: ...)`
    static func dd_car_04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dd_car_04, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dd_car_04a", bundle: ..., traitCollection: ...)`
    static func dd_car_04a(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dd_car_04a, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fh_icn", bundle: ..., traitCollection: ...)`
    static func fh_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fh_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "g_02_icn", bundle: ..., traitCollection: ...)`
    static func g_02_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.g_02_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "g_kng_icn", bundle: ..., traitCollection: ...)`
    static func g_kng_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.g_kng_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "g_sc_icn", bundle: ..., traitCollection: ...)`
    static func g_sc_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.g_sc_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "g_scg_icn", bundle: ..., traitCollection: ...)`
    static func g_scg_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.g_scg_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "g_skc_icn", bundle: ..., traitCollection: ...)`
    static func g_skc_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.g_skc_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_bg_01", bundle: ..., traitCollection: ...)`
    static func grzx_bg_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_bg_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_bg_02", bundle: ..., traitCollection: ...)`
    static func grzx_bg_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_bg_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_bq_icn", bundle: ..., traitCollection: ...)`
    static func grzx_bq_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_bq_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_button_01", bundle: ..., traitCollection: ...)`
    static func grzx_button_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_button_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_button_02", bundle: ..., traitCollection: ...)`
    static func grzx_button_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_button_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_dg_icn", bundle: ..., traitCollection: ...)`
    static func grzx_dg_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_dg_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_dj_01", bundle: ..., traitCollection: ...)`
    static func grzx_dj_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_dj_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_dj_02", bundle: ..., traitCollection: ...)`
    static func grzx_dj_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_dj_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_dz_icn", bundle: ..., traitCollection: ...)`
    static func grzx_dz_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_dz_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_jh_icn", bundle: ..., traitCollection: ...)`
    static func grzx_jh_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_jh_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_jh_icn-1", bundle: ..., traitCollection: ...)`
    static func grzx_jh_icn1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_jh_icn1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_s_icn", bundle: ..., traitCollection: ...)`
    static func grzx_s_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_s_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_sz_icn", bundle: ..., traitCollection: ...)`
    static func grzx_sz_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_sz_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_tjyj_icn", bundle: ..., traitCollection: ...)`
    static func grzx_tjyj_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_tjyj_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_xx_icn-", bundle: ..., traitCollection: ...)`
    static func grzx_xx_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_xx_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grzx_xz2_icn", bundle: ..., traitCollection: ...)`
    static func grzx_xz2_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grzx_xz2_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_ddo_icn", bundle: ..., traitCollection: ...)`
    static func home_ddo_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_ddo_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "kjag_gj_icn", bundle: ..., traitCollection: ...)`
    static func kjag_gj_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kjag_gj_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_mm_icn", bundle: ..., traitCollection: ...)`
    static func login_mm_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_mm_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_yzm_icn", bundle: ..., traitCollection: ...)`
    static func login_yzm_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_yzm_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_zh_icn", bundle: ..., traitCollection: ...)`
    static func login_zh_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_zh_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ltqp.9", bundle: ..., traitCollection: ...)`
    static func ltqp9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ltqp9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ltqp_02.9", bundle: ..., traitCollection: ...)`
    static func ltqp_029(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ltqp_029, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mrtx_grzx", bundle: ..., traitCollection: ...)`
    static func mrtx_grzx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mrtx_grzx, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "s_bg_01", bundle: ..., traitCollection: ...)`
    static func s_bg_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.s_bg_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "s_bg_02", bundle: ..., traitCollection: ...)`
    static func s_bg_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.s_bg_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sy_bg", bundle: ..., traitCollection: ...)`
    static func sy_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sy_dd_01", bundle: ..., traitCollection: ...)`
    static func sy_dd_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_dd_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sy_dh_icn", bundle: ..., traitCollection: ...)`
    static func sy_dh_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_dh_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sy_dw_icn", bundle: ..., traitCollection: ...)`
    static func sy_dw_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_dw_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sy_mrt", bundle: ..., traitCollection: ...)`
    static func sy_mrt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_mrt, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sy_mrt_icn", bundle: ..., traitCollection: ...)`
    static func sy_mrt_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_mrt_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sy_pic_01", bundle: ..., traitCollection: ...)`
    static func sy_pic_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_pic_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sy_pic_02", bundle: ..., traitCollection: ...)`
    static func sy_pic_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_pic_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sy_qu_icn", bundle: ..., traitCollection: ...)`
    static func sy_qu_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_qu_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sy_tp_yj", bundle: ..., traitCollection: ...)`
    static func sy_tp_yj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_tp_yj, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sy_xx_icn", bundle: ..., traitCollection: ...)`
    static func sy_xx_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_xx_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sy_yy_icn", bundle: ..., traitCollection: ...)`
    static func sy_yy_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_yy_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "syzc_xd_icn", bundle: ..., traitCollection: ...)`
    static func syzc_xd_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.syzc_xd_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ty_backarrow", bundle: ..., traitCollection: ...)`
    static func ty_backarrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ty_backarrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ty_backarrow_01", bundle: ..., traitCollection: ...)`
    static func ty_backarrow_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ty_backarrow_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ty_backarrow_02", bundle: ..., traitCollection: ...)`
    static func ty_backarrow_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ty_backarrow_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ty_backarrow_04", bundle: ..., traitCollection: ...)`
    static func ty_backarrow_04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ty_backarrow_04, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ty_dd_04", bundle: ..., traitCollection: ...)`
    static func ty_dd_04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ty_dd_04, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ty_dd_icn", bundle: ..., traitCollection: ...)`
    static func ty_dd_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ty_dd_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ty_dd_o1", bundle: ..., traitCollection: ...)`
    static func ty_dd_o1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ty_dd_o1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ty_dv_icn", bundle: ..., traitCollection: ...)`
    static func ty_dv_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ty_dv_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ty_wxy_icn", bundle: ..., traitCollection: ...)`
    static func ty_wxy_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ty_wxy_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ty_xl_01", bundle: ..., traitCollection: ...)`
    static func ty_xl_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ty_xl_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ty_xz_icn", bundle: ..., traitCollection: ...)`
    static func ty_xz_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ty_xz_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wd_backarrow_o1", bundle: ..., traitCollection: ...)`
    static func wd_backarrow_o1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wd_backarrow_o1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wd_da_icn", bundle: ..., traitCollection: ...)`
    static func wd_da_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wd_da_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wd_dd_icn", bundle: ..., traitCollection: ...)`
    static func wd_dd_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wd_dd_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wd_dyj_icn", bundle: ..., traitCollection: ...)`
    static func wd_dyj_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wd_dyj_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wd_qx_icn", bundle: ..., traitCollection: ...)`
    static func wd_qx_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wd_qx_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wd_tj_icn", bundle: ..., traitCollection: ...)`
    static func wd_tj_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wd_tj_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wechat_gj_icn", bundle: ..., traitCollection: ...)`
    static func wechat_gj_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wechat_gj_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xd_icn", bundle: ..., traitCollection: ...)`
    static func xd_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xd_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "yhq_01", bundle: ..., traitCollection: ...)`
    static func yhq_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yhq_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "yhq_02", bundle: ..., traitCollection: ...)`
    static func yhq_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yhq_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "yhq_bg_01", bundle: ..., traitCollection: ...)`
    static func yhq_bg_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yhq_bg_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "yqhy_bg", bundle: ..., traitCollection: ...)`
    static func yqhy_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yqhy_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zf_kq_icn", bundle: ..., traitCollection: ...)`
    static func zf_kq_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zf_kq_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zf_wechat_icn", bundle: ..., traitCollection: ...)`
    static func zf_wechat_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zf_wechat_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zf_ye_icn", bundle: ..., traitCollection: ...)`
    static func zf_ye_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zf_ye_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zf_zhib_icn", bundle: ..., traitCollection: ...)`
    static func zf_zhib_icn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zf_zhib_icn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zfym_pic", bundle: ..., traitCollection: ...)`
    static func zfym_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zfym_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zl_01", bundle: ..., traitCollection: ...)`
    static func zl_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zl_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zl_02", bundle: ..., traitCollection: ...)`
    static func zl_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zl_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zl_03", bundle: ..., traitCollection: ...)`
    static func zl_03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zl_03, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 24 nibs.
  struct nib {
    /// Nib `AccountOrderCell`.
    static let accountOrderCell = _R.nib._AccountOrderCell()
    /// Nib `AccountRechargeCell`.
    static let accountRechargeCell = _R.nib._AccountRechargeCell()
    /// Nib `AddressCell`.
    static let addressCell = _R.nib._AddressCell()
    /// Nib `AddressHeaderView`.
    static let addressHeaderView = _R.nib._AddressHeaderView()
    /// Nib `AppraiseCell`.
    static let appraiseCell = _R.nib._AppraiseCell()
    /// Nib `CouponCell`.
    static let couponCell = _R.nib._CouponCell()
    /// Nib `GoodsEditCell`.
    static let goodsEditCell = _R.nib._GoodsEditCell()
    /// Nib `InfoDriverCell`.
    static let infoDriverCell = _R.nib._InfoDriverCell()
    /// Nib `InfoPaymentCell`.
    static let infoPaymentCell = _R.nib._InfoPaymentCell()
    /// Nib `InfoProgressCell`.
    static let infoProgressCell = _R.nib._InfoProgressCell()
    /// Nib `IntegralCell`.
    static let integralCell = _R.nib._IntegralCell()
    /// Nib `MainAdressCell`.
    static let mainAdressCell = _R.nib._MainAdressCell()
    /// Nib `MainBottomView`.
    static let mainBottomView = _R.nib._MainBottomView()
    /// Nib `MainDateCell`.
    static let mainDateCell = _R.nib._MainDateCell()
    /// Nib `MainUserView`.
    static let mainUserView = _R.nib._MainUserView()
    /// Nib `MessageCell`.
    static let messageCell = _R.nib._MessageCell()
    /// Nib `MessageInfoVC`.
    static let messageInfoVC = _R.nib._MessageInfoVC()
    /// Nib `OrderAddressCell`.
    static let orderAddressCell = _R.nib._OrderAddressCell()
    /// Nib `OrderCell`.
    static let orderCell = _R.nib._OrderCell()
    /// Nib `OrderInfoVC`.
    static let orderInfoVC = _R.nib._OrderInfoVC()
    /// Nib `OrderIntroCell`.
    static let orderIntroCell = _R.nib._OrderIntroCell()
    /// Nib `OrderLinkmanCell`.
    static let orderLinkmanCell = _R.nib._OrderLinkmanCell()
    /// Nib `PatternSelectView`.
    static let patternSelectView = _R.nib._PatternSelectView()
    /// Nib `SpecialOrderInfoCell`.
    static let specialOrderInfoCell = _R.nib._SpecialOrderInfoCell()
    
    /// `UINib(name: "AccountOrderCell", in: bundle)`
    static func accountOrderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountOrderCell)
    }
    
    /// `UINib(name: "AccountRechargeCell", in: bundle)`
    static func accountRechargeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountRechargeCell)
    }
    
    /// `UINib(name: "AddressCell", in: bundle)`
    static func addressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressCell)
    }
    
    /// `UINib(name: "AddressHeaderView", in: bundle)`
    static func addressHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressHeaderView)
    }
    
    /// `UINib(name: "AppraiseCell", in: bundle)`
    static func appraiseCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appraiseCell)
    }
    
    /// `UINib(name: "CouponCell", in: bundle)`
    static func couponCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.couponCell)
    }
    
    /// `UINib(name: "GoodsEditCell", in: bundle)`
    static func goodsEditCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodsEditCell)
    }
    
    /// `UINib(name: "InfoDriverCell", in: bundle)`
    static func infoDriverCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.infoDriverCell)
    }
    
    /// `UINib(name: "InfoPaymentCell", in: bundle)`
    static func infoPaymentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.infoPaymentCell)
    }
    
    /// `UINib(name: "InfoProgressCell", in: bundle)`
    static func infoProgressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.infoProgressCell)
    }
    
    /// `UINib(name: "IntegralCell", in: bundle)`
    static func integralCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.integralCell)
    }
    
    /// `UINib(name: "MainAdressCell", in: bundle)`
    static func mainAdressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainAdressCell)
    }
    
    /// `UINib(name: "MainBottomView", in: bundle)`
    static func mainBottomView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainBottomView)
    }
    
    /// `UINib(name: "MainDateCell", in: bundle)`
    static func mainDateCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainDateCell)
    }
    
    /// `UINib(name: "MainUserView", in: bundle)`
    static func mainUserView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainUserView)
    }
    
    /// `UINib(name: "MessageCell", in: bundle)`
    static func messageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageCell)
    }
    
    /// `UINib(name: "MessageInfoVC", in: bundle)`
    static func messageInfoVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageInfoVC)
    }
    
    /// `UINib(name: "OrderAddressCell", in: bundle)`
    static func orderAddressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderAddressCell)
    }
    
    /// `UINib(name: "OrderCell", in: bundle)`
    static func orderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderCell)
    }
    
    /// `UINib(name: "OrderInfoVC", in: bundle)`
    static func orderInfoVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderInfoVC)
    }
    
    /// `UINib(name: "OrderIntroCell", in: bundle)`
    static func orderIntroCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderIntroCell)
    }
    
    /// `UINib(name: "OrderLinkmanCell", in: bundle)`
    static func orderLinkmanCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderLinkmanCell)
    }
    
    /// `UINib(name: "PatternSelectView", in: bundle)`
    static func patternSelectView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.patternSelectView)
    }
    
    /// `UINib(name: "SpecialOrderInfoCell", in: bundle)`
    static func specialOrderInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.specialOrderInfoCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 9 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddressCell`.
    static let addressCell: Rswift.ReuseIdentifier<AddressCell> = Rswift.ReuseIdentifier(identifier: "AddressCell")
    /// Reuse identifier `DeliveryNameCell`.
    static let deliveryNameCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "DeliveryNameCell")
    /// Reuse identifier `DeliveryPhoneCell`.
    static let deliveryPhoneCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "DeliveryPhoneCell")
    /// Reuse identifier `GoodsNameCell`.
    static let goodsNameCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "GoodsNameCell")
    /// Reuse identifier `GoodsQuantityCell`.
    static let goodsQuantityCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "GoodsQuantityCell")
    /// Reuse identifier `GoodsVolumeCell`.
    static let goodsVolumeCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "GoodsVolumeCell")
    /// Reuse identifier `GoodsWeightCell`.
    static let goodsWeightCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "GoodsWeightCell")
    /// Reuse identifier `ReceiverNameCell`.
    static let receiverNameCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ReceiverNameCell")
    /// Reuse identifier `ReceiverPhoneCell`.
    static let receiverPhoneCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ReceiverPhoneCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 10 view controllers.
  struct segue {
    /// This struct is generated for `ExpressageOrderVC`, and contains static references to 5 segues.
    struct expressageOrderVC {
      /// Segue identifier `goConfirmOrder`.
      static let goConfirmOrder: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ExpressageOrderVC, ConfirmOrderVC> = Rswift.StoryboardSegueIdentifier(identifier: "goConfirmOrder")
      /// Segue identifier `goDeliveryEdit`.
      static let goDeliveryEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ExpressageOrderVC, FillOutVC> = Rswift.StoryboardSegueIdentifier(identifier: "goDeliveryEdit")
      /// Segue identifier `goExtNeed`.
      static let goExtNeed: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ExpressageOrderVC, ExtNeedVC> = Rswift.StoryboardSegueIdentifier(identifier: "goExtNeed")
      /// Segue identifier `goGoodsEdit`.
      static let goGoodsEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ExpressageOrderVC, FillOutVC> = Rswift.StoryboardSegueIdentifier(identifier: "goGoodsEdit")
      /// Segue identifier `goReceiverEdit`.
      static let goReceiverEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ExpressageOrderVC, FillOutVC> = Rswift.StoryboardSegueIdentifier(identifier: "goReceiverEdit")
      
      /// Optionally returns a typed version of segue `goConfirmOrder`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goConfirmOrder(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ExpressageOrderVC, ConfirmOrderVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.expressageOrderVC.goConfirmOrder, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goDeliveryEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goDeliveryEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ExpressageOrderVC, FillOutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.expressageOrderVC.goDeliveryEdit, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goExtNeed`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goExtNeed(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ExpressageOrderVC, ExtNeedVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.expressageOrderVC.goExtNeed, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goGoodsEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goGoodsEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ExpressageOrderVC, FillOutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.expressageOrderVC.goGoodsEdit, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goReceiverEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goReceiverEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ExpressageOrderVC, FillOutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.expressageOrderVC.goReceiverEdit, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LongJourneyOrderVC`, and contains static references to 5 segues.
    struct longJourneyOrderVC {
      /// Segue identifier `goConfirmOrder`.
      static let goConfirmOrder: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LongJourneyOrderVC, ConfirmOrderVC> = Rswift.StoryboardSegueIdentifier(identifier: "goConfirmOrder")
      /// Segue identifier `goDeliveryEdit`.
      static let goDeliveryEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LongJourneyOrderVC, FillOutVC> = Rswift.StoryboardSegueIdentifier(identifier: "goDeliveryEdit")
      /// Segue identifier `goExtNeed`.
      static let goExtNeed: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LongJourneyOrderVC, ExtNeedVC> = Rswift.StoryboardSegueIdentifier(identifier: "goExtNeed")
      /// Segue identifier `goGoodsEdit`.
      static let goGoodsEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LongJourneyOrderVC, FillOutVC> = Rswift.StoryboardSegueIdentifier(identifier: "goGoodsEdit")
      /// Segue identifier `goReceiverEdit`.
      static let goReceiverEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LongJourneyOrderVC, FillOutVC> = Rswift.StoryboardSegueIdentifier(identifier: "goReceiverEdit")
      
      /// Optionally returns a typed version of segue `goConfirmOrder`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goConfirmOrder(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LongJourneyOrderVC, ConfirmOrderVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.longJourneyOrderVC.goConfirmOrder, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goDeliveryEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goDeliveryEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LongJourneyOrderVC, FillOutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.longJourneyOrderVC.goDeliveryEdit, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goExtNeed`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goExtNeed(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LongJourneyOrderVC, ExtNeedVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.longJourneyOrderVC.goExtNeed, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goGoodsEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goGoodsEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LongJourneyOrderVC, FillOutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.longJourneyOrderVC.goGoodsEdit, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goReceiverEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goReceiverEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LongJourneyOrderVC, FillOutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.longJourneyOrderVC.goReceiverEdit, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MainVC`, and contains static references to 3 segues.
    struct mainVC {
      /// Segue identifier `goOrder`.
      static let goOrder: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainVC, MyOrderVC> = Rswift.StoryboardSegueIdentifier(identifier: "goOrder")
      /// Segue identifier `goSetting`.
      static let goSetting: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainVC, SettingVC> = Rswift.StoryboardSegueIdentifier(identifier: "goSetting")
      /// Segue identifier `goWallet`.
      static let goWallet: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainVC, WalletVC> = Rswift.StoryboardSegueIdentifier(identifier: "goWallet")
      
      /// Optionally returns a typed version of segue `goOrder`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goOrder(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainVC, MyOrderVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainVC.goOrder, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goSetting`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goSetting(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainVC, SettingVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainVC.goSetting, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goWallet`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goWallet(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainVC, WalletVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainVC.goWallet, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PaymentVC`, and contains static references to 1 segues.
    struct paymentVC {
      /// Segue identifier `goEstimate`.
      static let goEstimate: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PaymentVC, EstimateVC> = Rswift.StoryboardSegueIdentifier(identifier: "goEstimate")
      
      /// Optionally returns a typed version of segue `goEstimate`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goEstimate(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PaymentVC, EstimateVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.paymentVC.goEstimate, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SendOrderVC`, and contains static references to 1 segues.
    struct sendOrderVC {
      /// Segue identifier `goWaitArrive`.
      static let goWaitArrive: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SendOrderVC, WaitArriveVC> = Rswift.StoryboardSegueIdentifier(identifier: "goWaitArrive")
      
      /// Optionally returns a typed version of segue `goWaitArrive`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goWaitArrive(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SendOrderVC, WaitArriveVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sendOrderVC.goWaitArrive, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SharedOrderVC`, and contains static references to 4 segues.
    struct sharedOrderVC {
      /// Segue identifier `goConfirmOrder`.
      static let goConfirmOrder: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SharedOrderVC, ConfirmOrderVC> = Rswift.StoryboardSegueIdentifier(identifier: "goConfirmOrder")
      /// Segue identifier `goDeliveryEdit`.
      static let goDeliveryEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SharedOrderVC, FillOutVC> = Rswift.StoryboardSegueIdentifier(identifier: "goDeliveryEdit")
      /// Segue identifier `goGoodsEdit`.
      static let goGoodsEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SharedOrderVC, FillOutVC> = Rswift.StoryboardSegueIdentifier(identifier: "goGoodsEdit")
      /// Segue identifier `goReceiverEdit`.
      static let goReceiverEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SharedOrderVC, FillOutVC> = Rswift.StoryboardSegueIdentifier(identifier: "goReceiverEdit")
      
      /// Optionally returns a typed version of segue `goConfirmOrder`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goConfirmOrder(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SharedOrderVC, ConfirmOrderVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sharedOrderVC.goConfirmOrder, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goDeliveryEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goDeliveryEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SharedOrderVC, FillOutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sharedOrderVC.goDeliveryEdit, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goGoodsEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goGoodsEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SharedOrderVC, FillOutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sharedOrderVC.goGoodsEdit, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goReceiverEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goReceiverEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SharedOrderVC, FillOutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sharedOrderVC.goReceiverEdit, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SpecialOrderVC`, and contains static references to 5 segues.
    struct specialOrderVC {
      /// Segue identifier `goDeliveryEdit`.
      static let goDeliveryEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SpecialOrderVC, FillOutVC> = Rswift.StoryboardSegueIdentifier(identifier: "goDeliveryEdit")
      /// Segue identifier `goExtNeed`.
      static let goExtNeed: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SpecialOrderVC, ExtNeedVC> = Rswift.StoryboardSegueIdentifier(identifier: "goExtNeed")
      /// Segue identifier `goGoodsEdit`.
      static let goGoodsEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SpecialOrderVC, FillOutVC> = Rswift.StoryboardSegueIdentifier(identifier: "goGoodsEdit")
      /// Segue identifier `goReceiverEdit`.
      static let goReceiverEdit: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SpecialOrderVC, FillOutVC> = Rswift.StoryboardSegueIdentifier(identifier: "goReceiverEdit")
      /// Segue identifier `goSpecConfirmOrder`.
      static let goSpecConfirmOrder: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SpecialOrderVC, SpecConfirmOrderVC> = Rswift.StoryboardSegueIdentifier(identifier: "goSpecConfirmOrder")
      
      /// Optionally returns a typed version of segue `goDeliveryEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goDeliveryEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SpecialOrderVC, FillOutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.specialOrderVC.goDeliveryEdit, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goExtNeed`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goExtNeed(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SpecialOrderVC, ExtNeedVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.specialOrderVC.goExtNeed, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goGoodsEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goGoodsEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SpecialOrderVC, FillOutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.specialOrderVC.goGoodsEdit, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goReceiverEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goReceiverEdit(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SpecialOrderVC, FillOutVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.specialOrderVC.goReceiverEdit, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goSpecConfirmOrder`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goSpecConfirmOrder(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SpecialOrderVC, SpecConfirmOrderVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.specialOrderVC.goSpecConfirmOrder, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `WaitArriveVC`, and contains static references to 1 segues.
    struct waitArriveVC {
      /// Segue identifier `goWaitLoading`.
      static let goWaitLoading: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, WaitArriveVC, WaitLoadingVC> = Rswift.StoryboardSegueIdentifier(identifier: "goWaitLoading")
      
      /// Optionally returns a typed version of segue `goWaitLoading`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goWaitLoading(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, WaitArriveVC, WaitLoadingVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.waitArriveVC.goWaitLoading, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `WaitLoadingVC`, and contains static references to 2 segues.
    struct waitLoadingVC {
      /// Segue identifier `goGoDestination`.
      static let goGoDestination: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, WaitLoadingVC, GoDestinationVC> = Rswift.StoryboardSegueIdentifier(identifier: "goGoDestination")
      /// Segue identifier `goPayment`.
      static let goPayment: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, WaitLoadingVC, PaymentVC> = Rswift.StoryboardSegueIdentifier(identifier: "goPayment")
      
      /// Optionally returns a typed version of segue `goGoDestination`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goGoDestination(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, WaitLoadingVC, GoDestinationVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.waitLoadingVC.goGoDestination, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goPayment`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goPayment(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, WaitLoadingVC, PaymentVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.waitLoadingVC.goPayment, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `WalletVC`, and contains static references to 1 segues.
    struct walletVC {
      /// Segue identifier `goBalance`.
      static let goBalance: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, WalletVC, BalanceVC> = Rswift.StoryboardSegueIdentifier(identifier: "goBalance")
      
      /// Optionally returns a typed version of segue `goBalance`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goBalance(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, WalletVC, BalanceVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.walletVC.goBalance, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Order`.
    static let order = _R.storyboard.order()
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Order", bundle: ...)`
    static func order(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.order)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddressHeaderView.validate()
      try _CouponCell.validate()
      try _AccountOrderCell.validate()
      try _OrderAddressCell.validate()
      try _MainUserView.validate()
      try _OrderLinkmanCell.validate()
      try _MainAdressCell.validate()
      try _MainDateCell.validate()
      try _AppraiseCell.validate()
      try _MessageCell.validate()
      try _InfoDriverCell.validate()
      try _SpecialOrderInfoCell.validate()
      try _AddressCell.validate()
      try _MainBottomView.validate()
      try _OrderCell.validate()
      try _InfoPaymentCell.validate()
    }
    
    struct _AccountOrderCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AccountOrderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AccountOrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountOrderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "King") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'King' is used in nib 'AccountOrderCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AccountRechargeCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccountRechargeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AccountRechargeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountRechargeCell
      }
      
      fileprivate init() {}
    }
    
    struct _AddressCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddressCell
      
      let bundle = R.hostingBundle
      let identifier = "AddressCell"
      let name = "AddressCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "home_ddo_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_ddo_icn' is used in nib 'AddressCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AddressHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddressHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ty_xl_01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ty_xl_01' is used in nib 'AddressHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AppraiseCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AppraiseCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AppraiseCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppraiseCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "King") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'King' is used in nib 'AppraiseCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CouponCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CouponCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CouponCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "yhq_01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'yhq_01' is used in nib 'CouponCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "yhq_bg_01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'yhq_bg_01' is used in nib 'CouponCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _GoodsEditCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GoodsEditCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GoodsEditCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsEditCell
      }
      
      fileprivate init() {}
    }
    
    struct _InfoDriverCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InfoDriverCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InfoDriverCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoDriverCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "King") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'King' is used in nib 'InfoDriverCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _InfoPaymentCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InfoPaymentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InfoPaymentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoPaymentCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "g_02_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'g_02_icn' is used in nib 'InfoPaymentCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _InfoProgressCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InfoProgressCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InfoProgressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoProgressCell
      }
      
      fileprivate init() {}
    }
    
    struct _IntegralCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IntegralCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> IntegralCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IntegralCell
      }
      
      fileprivate init() {}
    }
    
    struct _MainAdressCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MainAdressCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MainAdressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MainAdressCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "wd_tj_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wd_tj_icn' is used in nib 'MainAdressCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MainBottomView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MainBottomView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "sy_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sy_bg' is used in nib 'MainBottomView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sy_dw_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sy_dw_icn' is used in nib 'MainBottomView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MainDateCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MainDateCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MainDateCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MainDateCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "grzx_jh_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'grzx_jh_icn' is used in nib 'MainDateCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MainUserView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MainUserView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "sy_dd_01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sy_dd_01' is used in nib 'MainUserView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "grzx_dg_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'grzx_dg_icn' is used in nib 'MainUserView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "King") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'King' is used in nib 'MainUserView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "grzx_jh_icn-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'grzx_jh_icn-1' is used in nib 'MainUserView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "grzx_sz_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'grzx_sz_icn' is used in nib 'MainUserView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MessageCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MessageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MessageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "g_scg_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'g_scg_icn' is used in nib 'MessageCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MessageInfoVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessageInfoVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _OrderAddressCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderAddressCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderAddressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderAddressCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ty_dd_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ty_dd_icn' is used in nib 'OrderAddressCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ty_dd_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ty_dd_icn' is used in nib 'OrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ty_dv_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ty_dv_icn' is used in nib 'OrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "grzx_dg_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'grzx_dg_icn' is used in nib 'OrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "grzx_jh_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'grzx_jh_icn' is used in nib 'OrderCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderInfoVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderInfoVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _OrderIntroCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderIntroCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderIntroCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderIntroCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderLinkmanCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderLinkmanCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderLinkmanCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderLinkmanCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "login_zh_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_zh_icn' is used in nib 'OrderLinkmanCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PatternSelectView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PatternSelectView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SpecialOrderInfoCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SpecialOrderInfoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SpecialOrderInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpecialOrderInfoCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "dd_car_01a") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dd_car_01a' is used in nib 'SpecialOrderInfoCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try login.validate()
      try order.validate()
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Login"
      
      static func validate() throws {
        if UIKit.UIImage(named: "login_yzm_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_yzm_icn' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_mm_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_mm_icn' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_zh_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_zh_icn' is used in storyboard 'Login', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "sy_xx_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sy_xx_icn' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ty_xl_01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ty_xl_01' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zf_wechat_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zf_wechat_icn' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zf_ye_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zf_ye_icn' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zf_kq_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zf_kq_icn' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zf_zhib_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zf_zhib_icn' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_zh_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_zh_icn' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zfym_pic") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zfym_pic' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct order: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SpecialOrderVC
      
      let bundle = R.hostingBundle
      let expressageOrderVC = StoryboardViewControllerResource<ExpressageOrderVC>(identifier: "ExpressageOrderVC")
      let goDestinationVC = StoryboardViewControllerResource<GoDestinationVC>(identifier: "GoDestinationVC")
      let longJourneyOrderVC = StoryboardViewControllerResource<LongJourneyOrderVC>(identifier: "LongJourneyOrderVC")
      let name = "Order"
      let paymentVC = StoryboardViewControllerResource<PaymentVC>(identifier: "PaymentVC")
      let sendOrderVC = StoryboardViewControllerResource<SendOrderVC>(identifier: "SendOrderVC")
      let sharedOrderVC = StoryboardViewControllerResource<SharedOrderVC>(identifier: "SharedOrderVC")
      let specialNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "SpecialNav")
      let specialOrderVC = StoryboardViewControllerResource<SpecialOrderVC>(identifier: "SpecialOrderVC")
      let waitArriveVC = StoryboardViewControllerResource<WaitArriveVC>(identifier: "WaitArriveVC")
      let waitLoadingVC = StoryboardViewControllerResource<WaitLoadingVC>(identifier: "WaitLoadingVC")
      
      func expressageOrderVC(_: Void = ()) -> ExpressageOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: expressageOrderVC)
      }
      
      func goDestinationVC(_: Void = ()) -> GoDestinationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: goDestinationVC)
      }
      
      func longJourneyOrderVC(_: Void = ()) -> LongJourneyOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: longJourneyOrderVC)
      }
      
      func paymentVC(_: Void = ()) -> PaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentVC)
      }
      
      func sendOrderVC(_: Void = ()) -> SendOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendOrderVC)
      }
      
      func sharedOrderVC(_: Void = ()) -> SharedOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sharedOrderVC)
      }
      
      func specialNav(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: specialNav)
      }
      
      func specialOrderVC(_: Void = ()) -> SpecialOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: specialOrderVC)
      }
      
      func waitArriveVC(_: Void = ()) -> WaitArriveVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: waitArriveVC)
      }
      
      func waitLoadingVC(_: Void = ()) -> WaitLoadingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: waitLoadingVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "sy_xx_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sy_xx_icn' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dd_car_04") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dd_car_04' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "syzc_xd_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'syzc_xd_icn' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zl_03") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zl_03' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "02") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '02' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dd_car_03") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dd_car_03' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sy_dh_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sy_dh_icn' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dd_car_02") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dd_car_02' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "King") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'King' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sy_dd_01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sy_dd_01' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sy_dw_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sy_dw_icn' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ty_wxy_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ty_wxy_icn' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zl_01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zl_01' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dd_car_01a") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dd_car_01a' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "grzx_jh_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'grzx_jh_icn' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "alzf_gj_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'alzf_gj_icn' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wd_dyj_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wd_dyj_icn' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wechat_gj_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wechat_gj_icn' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kjag_gj_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kjag_gj_icn' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sy_yy_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sy_yy_icn' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fh_icn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fh_icn' is used in storyboard 'Order', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zl_02") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zl_02' is used in storyboard 'Order', but couldn't be loaded.") }
        if _R.storyboard.order().waitLoadingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'waitLoadingVC' could not be loaded from storyboard 'Order' as 'WaitLoadingVC'.") }
        if _R.storyboard.order().sharedOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sharedOrderVC' could not be loaded from storyboard 'Order' as 'SharedOrderVC'.") }
        if _R.storyboard.order().specialNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'specialNav' could not be loaded from storyboard 'Order' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.order().specialOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'specialOrderVC' could not be loaded from storyboard 'Order' as 'SpecialOrderVC'.") }
        if _R.storyboard.order().longJourneyOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'longJourneyOrderVC' could not be loaded from storyboard 'Order' as 'LongJourneyOrderVC'.") }
        if _R.storyboard.order().sendOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendOrderVC' could not be loaded from storyboard 'Order' as 'SendOrderVC'.") }
        if _R.storyboard.order().waitArriveVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'waitArriveVC' could not be loaded from storyboard 'Order' as 'WaitArriveVC'.") }
        if _R.storyboard.order().goDestinationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'goDestinationVC' could not be loaded from storyboard 'Order' as 'GoDestinationVC'.") }
        if _R.storyboard.order().expressageOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'expressageOrderVC' could not be loaded from storyboard 'Order' as 'ExpressageOrderVC'.") }
        if _R.storyboard.order().paymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentVC' could not be loaded from storyboard 'Order' as 'PaymentVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}